// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO "bank"."entries" (account_id, amount) VALUES ($1, $2) RETURNING entry_id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64
	Amount    int64
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (BankEntry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i BankEntry
	err := row.Scan(
		&i.EntryID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntryByEntryId = `-- name: GetEntryByEntryId :one
select account_id, amount, created_at  from "bank"."entries" where entry_id = 1
`

type GetEntryByEntryIdRow struct {
	AccountID int64
	Amount    int64
	CreatedAt sql.NullTime
}

func (q *Queries) GetEntryByEntryId(ctx context.Context) (GetEntryByEntryIdRow, error) {
	row := q.db.QueryRowContext(ctx, getEntryByEntryId)
	var i GetEntryByEntryIdRow
	err := row.Scan(&i.AccountID, &i.Amount, &i.CreatedAt)
	return i, err
}
