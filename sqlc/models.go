// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type BankCurrency string

const (
	BankCurrencyUSD BankCurrency = "USD"
	BankCurrencyEUR BankCurrency = "EUR"
)

func (e *BankCurrency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankCurrency(s)
	case string:
		*e = BankCurrency(s)
	default:
		return fmt.Errorf("unsupported scan type for BankCurrency: %T", src)
	}
	return nil
}

type NullBankCurrency struct {
	BankCurrency BankCurrency
	Valid        bool // Valid is true if BankCurrency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.BankCurrency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankCurrency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankCurrency), nil
}

type BankAccount struct {
	AccountID int64
	Owner     string
	Balance   int64
	Currency  string
	CreatedAt sql.NullTime
}

type BankEntry struct {
	EntryID   int64
	AccountID int64
	Amount    int64
	CreatedAt sql.NullTime
}

type BankTransfer struct {
	EntryID       int64
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
	CreatedAt     sql.NullTime
}
