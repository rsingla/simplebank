// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "bank"."users" (username, hashed_password, first_name, last_name, email) VALUES ($1, $2, $3, $4, $5) RETURNING username, hashed_password, first_name, last_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
	FirstName      string
	LastName       string
	Email          string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "bank"."users" WHERE username = $1 RETURNING username, hashed_password, first_name, last_name, email, password_changed_at, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, username string) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, username)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select username, hashed_password, first_name, last_name, email, password_changed_at, created_at  from "bank"."users" where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select username, hashed_password, first_name, last_name, email, password_changed_at, created_at  from "bank"."users" where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
select username, hashed_password, first_name, last_name, email, password_changed_at, created_at  from "bank"."users" where username = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT username, hashed_password, first_name, last_name, email, password_changed_at, created_at FROM "bank"."users"
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]BankUser, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankUser
	for rows.Next() {
		var i BankUser
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, first_name, last_name, email, password_changed_at, created_at FROM "bank"."users" ORDER BY username LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]BankUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankUser
	for rows.Next() {
		var i BankUser
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE  "bank"."users" SET hashed_password = $1, password_changed_at = $2 WHERE username = $3 RETURNING username, hashed_password, first_name, last_name, email, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword    string
	PasswordChangedAt time.Time
	Username          string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (BankUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.HashedPassword, arg.PasswordChangedAt, arg.Username)
	var i BankUser
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
