// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "bank"."accounts" (owner, balance, currency) VALUES ($1, $2, $3) RETURNING account_id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string
	Balance  int64
	Currency string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i BankAccount
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM "bank"."accounts" WHERE account_id = $1 RETURNING account_id, owner, balance, currency, created_at
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int64) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, accountID)
	var i BankAccount
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByAccountId = `-- name: GetAccountByAccountId :one
select account_id, owner, balance, currency, created_at  from "bank"."accounts" where account_id = $1
`

func (q *Queries) GetAccountByAccountId(ctx context.Context, accountID int64) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccountByAccountId, accountID)
	var i BankAccount
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByOwnerName = `-- name: GetAccountByOwnerName :many
select account_id, owner, balance, currency, created_at  from "bank"."accounts" where owner = $1
`

func (q *Queries) GetAccountByOwnerName(ctx context.Context, owner string) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, getAccountByOwnerName, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.AccountID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
select account_id, owner, balance, currency, created_at  from "bank"."accounts" where account_id = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accountID int64) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, accountID)
	var i BankAccount
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, owner, balance, currency, created_at FROM "bank"."accounts"
`

func (q *Queries) ListAccounts(ctx context.Context) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.AccountID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE  "bank"."accounts" SET balance = $1 WHERE account_id = $2 RETURNING account_id, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	Balance   int64
	AccountID int64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Balance, arg.AccountID)
	var i BankAccount
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
